{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BlnsjiweaVg7"
      },
      "source": [
        "**All Rights Reserved**\n",
        "\n",
        "**Copyright (c) 2022 IRT Saint-Exupery**\n",
        "\n",
        "üñäÔ∏è Authors : Adil Zouitine & Lucas Hervier\n",
        "\n",
        "‚úâÔ∏è Emails*: adil.zouitine@irt-saintxupery.com & lucas.hervier@irt-saintexupery.com*\n",
        "\n",
        "# üè∞ Project Lab: Deep Learning\n",
        "\n",
        "**Scope of this evaluation:** Now that you have been in touch with a deep learning framework, it is time to learn to get comfortable with it. Thus, the first part of this evaluation will basically consist on applying what you previously saw to a new use-case: [CIFAR-10](https://www.cs.toronto.edu/~kriz/cifar.html). In contrast, the second part of this evaluation will require you to make some investigation on your own as we will ask you to go further than what you have been taught yet.\n",
        "\n",
        "**Evaluation criteria:** The two exercises will be equally important for your final grade. The 2 must be addressed, at least partially, or a penalty will be applied on your final grade. For this assignement you are expected to upload on the LMS platform a zip folder with the following folder name: `Name_Surname_DL_Project.zip`. This folder will contain a Jupyter Notebook: `Name_Surname_DL_Project.ipynb` that address both exercises and any additional relevant files that may be outcomes of the two exercises. In addition to the content, the format of the notebook will play an important part of your final grade: Correctly use the Markdown format to ease the readiness of the notebook, your code is correctly commented/documented, you provide insights/analysis to what may outcome a given cell, you clearly explain what you are doing and why, and so on...\n",
        "\n",
        "‚ö†Ô∏è**Warning:**\n",
        "\n",
        "You can obviously use the Azure VM at your disposal for this challenge. However, we advise you to make prototypes either on google colab or on your local machine before deploying it in the VM. Indeed, you have a limited amount of time in Azure so do not use it for debugging but only when you are sure that your code will run smoothly on the VM."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UGGwInaZh9Rp"
      },
      "source": [
        "# üåâ Exercise 1: Transfer your knowledge\n",
        "\n",
        "For this part, we will:\n",
        "\n",
        "- Analyze the CIFAR-10 dataset\n",
        "- Train several (at least 2) CNN models\n",
        "- For each models: compute and save the relevant training metrics\n",
        "- Compare every model in terms of performance"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RBbvIMPSGdEj"
      },
      "source": [
        "# 1. Introduction\n",
        "\n",
        "The CIFAR10 (Canadian Institute For Advanced Research) dataset consists of **10 classes** with 6000 color images of **32√ó32 resolution** for each class. It is divided into **50000 training** and **10000 testing images**.  \n",
        "The class labels and their standard associated integer values are listed below : \n",
        "* 0: airplane\n",
        "* 1: automobile\n",
        "* 2: bird\n",
        "* 3: cat\n",
        "* 4: deer\n",
        "* 5: dog\n",
        "* 6: frog\n",
        "* 7: horse\n",
        "* 8: ship\n",
        "* 9: truck"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rGR8tio7T8Lm"
      },
      "source": [
        "Now, let's build some **Convolotional Neural Networks** that can help predict the classes of the images.  \n",
        "*But what is a CNN ?*  \n",
        "A Convolutional Neural Network (CNN) is a specific kind of neural network with multiple layers. It processes data that has a grid-like arrangement then extracts important features. One advantage of using CNNs is that we don't need to do a lot of pre-processing on images.  \n",
        "Below is one of the schemas we can find about CNN.\n",
        "\n",
        "<figure>\n",
        "    <img src=\"https://editor.analyticsvidhya.com/uploads/25366Convolutional_Neural_Network_to_identify_the_image_of_a_bird.png\" style=\"width:75%;display:block;margin-left:auto;margin-right:auto;\">\n",
        "    <figcaption style=\"text-align: center\">Fig.1 - Example of a CNN</figcaption>\n",
        "</figure>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "aMcAWq-wGdEg"
      },
      "outputs": [],
      "source": [
        "#Importation of the libraries used\n",
        "\n",
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import torchvision.datasets as datasets\n",
        "import torchvision.transforms as transforms\n",
        "import torchvision.models as models\n",
        "import torch.nn as nn\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from torch.optim import Adam,SGD, lr_scheduler\n",
        "from torch.utils.data import DataLoader\n",
        "from torchsummary import summary\n",
        "import os\n",
        "\n",
        "import time\n",
        "import copy\n",
        "from tqdm.notebook import tqdm\n",
        "\n",
        "sns.set()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cr5Tt3_UGdEl"
      },
      "source": [
        "First, let's load the dataset.  \n",
        "We will apply a `transform` argument to return a different version of our image. It will be defined as follow :\n",
        "* *transforms.ToTensor* : Convert a PIL Image or ndarray to tensor and scale the values accordingly\n",
        "* *transforms.Normalize* : Normalize a tensor image with mean and standard deviation  \n",
        "  \n",
        "We will also use `dataloaders`. It allows to sample batches of dataset data and to parallelize the batch formation on several workers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AJYPp3aLGdEl",
        "outputId": "17bbe323-657f-46dd-e1f1-aad4241eadc4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 170498071/170498071 [00:04<00:00, 38397665.92it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./data/cifar-10-python.tar.gz to ./data\n",
            "Files already downloaded and verified\n",
            "Number of training images:  50000\n",
            "Number of testing images:  10000\n",
            "Classes:  ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n"
          ]
        }
      ],
      "source": [
        "# Define the transform to apply to the data\n",
        "# standard cast into Tensor and pixel values normalization in [-1, 1] range\n",
        "transform = torchvision.transforms.Compose([\n",
        "    torchvision.transforms.ToTensor(),\n",
        "    torchvision.transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "])\n",
        "\n",
        "trainset = torchvision.datasets.CIFAR10(\n",
        "    root='./data', train=True, download=True, transform=transform\n",
        ")\n",
        "\n",
        "testset = torchvision.datasets.CIFAR10(\n",
        "    root='./data', train=False, download=True, transform=transform\n",
        ")\n",
        "\n",
        "\n",
        "batch_size = 32\n",
        "\n",
        "trainloader = torch.utils.data.DataLoader(\n",
        "    trainset, batch_size=batch_size, shuffle=True, num_workers=2\n",
        ")\n",
        "\n",
        "testloader = torch.utils.data.DataLoader(\n",
        "    testset, batch_size=batch_size, shuffle=False, num_workers=2\n",
        ")\n",
        "\n",
        "# Define the classes\n",
        "classes = ('plane', 'car', 'bird', 'cat',\n",
        "           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
        "\n",
        "# Print some information about the dataset\n",
        "print(\"Number of training images: \", len(trainset))\n",
        "print(\"Number of testing images: \", len(testset))\n",
        "print(\"Classes: \", classes)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gE14mBqqGdEn"
      },
      "source": [
        "Let us see the composition of the two dataset we have."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R5Yhro4TGdEn",
        "outputId": "1cf3dadd-af94-43e7-fd02-b148929094eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For the training dataset :\n",
            "Labels: 50000\n",
            "Shape: (50000, 32, 32, 3)\n",
            "\n",
            "For the test dataset :\n",
            "Labels: 10000\n",
            "Shape: (10000, 32, 32, 3)\n",
            "\n",
            "Classes :\n",
            "('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n"
          ]
        }
      ],
      "source": [
        "print('For the training dataset :')\n",
        "print(f'Labels: {len(trainset.targets)}')\n",
        "print(f'Shape: {trainset.data.shape}')\n",
        "\n",
        "print('\\nFor the test dataset :')\n",
        "print(f'Labels: {len(testset.targets)}')\n",
        "print(f'Shape: {testset.data.shape}')\n",
        "\n",
        "print('\\nClasses :')\n",
        "print(classes)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PEGyVaryGdEo"
      },
      "source": [
        "Let us see a few samples from the dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a3TxlgitGdEo",
        "outputId": "6a360878-1702-4da5-d7e8-111696ecb90c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[[[ 0.8196,  0.8275,  0.8196,  ..., -0.6000, -0.6941, -0.4118],\n",
              "           [ 1.0000,  1.0000,  1.0000,  ..., -0.7882, -0.7804, -0.5765],\n",
              "           [ 1.0000,  0.9686,  0.9843,  ..., -0.8118, -0.7098, -0.6314],\n",
              "           ...,\n",
              "           [-0.1294, -0.0039, -0.0824,  ..., -0.0118, -0.0510, -0.0039],\n",
              "           [-0.1216, -0.0745, -0.0275,  ..., -0.1451, -0.1451,  0.0353],\n",
              "           [-0.2392, -0.0980,  0.0510,  ..., -0.1373, -0.0980,  0.2784]],\n",
              " \n",
              "          [[ 0.7098,  0.7176,  0.7098,  ..., -0.4039, -0.4902, -0.1843],\n",
              "           [ 1.0000,  0.9686,  0.9765,  ..., -0.5686, -0.5686, -0.3412],\n",
              "           [ 1.0000,  0.9765,  0.9922,  ..., -0.5843, -0.4980, -0.3961],\n",
              "           ...,\n",
              "           [ 0.1922,  0.2941,  0.1922,  ...,  0.3176,  0.2863,  0.3176],\n",
              "           [ 0.1922,  0.2235,  0.2392,  ...,  0.1765,  0.1765,  0.3020],\n",
              "           [ 0.0745,  0.1922,  0.3098,  ...,  0.1765,  0.1922,  0.4745]],\n",
              " \n",
              "          [[ 0.7255,  0.7333,  0.7176,  ..., -0.4275, -0.5294, -0.2000],\n",
              "           [ 1.0000,  0.9922,  1.0000,  ..., -0.6314, -0.6549, -0.3961],\n",
              "           [ 1.0000,  0.9843,  1.0000,  ..., -0.6549, -0.5843, -0.4588],\n",
              "           ...,\n",
              "           [-0.3020, -0.1922, -0.2863,  ..., -0.0980, -0.1529, -0.1137],\n",
              "           [-0.2863, -0.2392, -0.2157,  ..., -0.2706, -0.2471, -0.0118],\n",
              "           [-0.3804, -0.2471, -0.1216,  ..., -0.2549, -0.1608,  0.3020]]],\n",
              " \n",
              " \n",
              "         [[[-0.6941, -0.6941, -0.6941,  ..., -0.5922, -0.6392, -0.6627],\n",
              "           [-0.6863, -0.6941, -0.6863,  ..., -0.5843, -0.6471, -0.6549],\n",
              "           [-0.6784, -0.6941, -0.6863,  ..., -0.4902, -0.5059, -0.4510],\n",
              "           ...,\n",
              "           [-0.3647, -0.3490, -0.3569,  ..., -0.1922, -0.1843, -0.1922],\n",
              "           [-0.3412, -0.3412, -0.3569,  ..., -0.2235, -0.2157, -0.2157],\n",
              "           [-0.3647, -0.3647, -0.3647,  ..., -0.1765, -0.1765, -0.1765]],\n",
              " \n",
              "          [[-0.7412, -0.7412, -0.7412,  ..., -0.5922, -0.6314, -0.6549],\n",
              "           [-0.7412, -0.7569, -0.7490,  ..., -0.5373, -0.5765, -0.5765],\n",
              "           [-0.7412, -0.7569, -0.7490,  ..., -0.3804, -0.3647, -0.3020],\n",
              "           ...,\n",
              "           [-0.3098, -0.2941, -0.3020,  ..., -0.1059, -0.0980, -0.1059],\n",
              "           [-0.2863, -0.2863, -0.3020,  ..., -0.1373, -0.1294, -0.1294],\n",
              "           [-0.3098, -0.3098, -0.3098,  ..., -0.0902, -0.0902, -0.0902]],\n",
              " \n",
              "          [[-0.6314, -0.6314, -0.6314,  ..., -0.3647, -0.4353, -0.4902],\n",
              "           [-0.6471, -0.6549, -0.6471,  ..., -0.3020, -0.3569, -0.3647],\n",
              "           [-0.6471, -0.6627, -0.6549,  ..., -0.0980, -0.0745,  0.0039],\n",
              "           ...,\n",
              "           [-0.0824, -0.0667, -0.0745,  ...,  0.1059,  0.1216,  0.1216],\n",
              "           [-0.0588, -0.0588, -0.0745,  ...,  0.0824,  0.0902,  0.0980],\n",
              "           [-0.0824, -0.0824, -0.0902,  ...,  0.1294,  0.1294,  0.1294]]],\n",
              " \n",
              " \n",
              "         [[[ 0.7882,  0.6471,  0.6078,  ..., -0.3647, -0.4039, -0.2941],\n",
              "           [ 0.7412,  0.6549,  0.6078,  ..., -0.0118, -0.1608, -0.3020],\n",
              "           [ 0.5843,  0.7412,  0.7176,  ..., -0.2863, -0.1059, -0.1294],\n",
              "           ...,\n",
              "           [-0.9765, -0.9608, -0.8902,  ..., -0.5294, -0.6549, -0.6784],\n",
              "           [-0.9686, -0.9686, -0.9686,  ..., -0.7490, -0.6471, -0.6078],\n",
              "           [-0.9451, -0.9608, -0.9686,  ..., -0.8039, -0.7412, -0.6549]],\n",
              " \n",
              "          [[ 0.7490,  0.6314,  0.6157,  ..., -0.4039, -0.4431, -0.3333],\n",
              "           [ 0.7255,  0.6471,  0.5922,  ..., -0.0510, -0.2000, -0.3412],\n",
              "           [ 0.5765,  0.7255,  0.6941,  ..., -0.3255, -0.1451, -0.1686],\n",
              "           ...,\n",
              "           [-0.9529, -0.9373, -0.8745,  ..., -0.5686, -0.6941, -0.7176],\n",
              "           [-0.9451, -0.9451, -0.9529,  ..., -0.7882, -0.6863, -0.6471],\n",
              "           [-0.9216, -0.9373, -0.9529,  ..., -0.8431, -0.7804, -0.6941]],\n",
              " \n",
              "          [[ 0.7176,  0.6235,  0.6157,  ..., -0.4510, -0.4902, -0.3804],\n",
              "           [ 0.6863,  0.6314,  0.6157,  ..., -0.0980, -0.2471, -0.3882],\n",
              "           [ 0.5608,  0.7098,  0.6706,  ..., -0.3725, -0.1922, -0.2157],\n",
              "           ...,\n",
              "           [-0.8980, -0.8824, -0.8196,  ..., -0.5922, -0.7176, -0.7412],\n",
              "           [-0.8902, -0.8902, -0.8980,  ..., -0.8118, -0.7098, -0.6706],\n",
              "           [-0.8667, -0.8902, -0.8902,  ..., -0.8667, -0.8039, -0.7098]]],\n",
              " \n",
              " \n",
              "         ...,\n",
              " \n",
              " \n",
              "         [[[-0.5059, -0.4196, -0.3569,  ..., -0.6000, -0.7569, -0.8039],\n",
              "           [-0.5451, -0.4431, -0.3569,  ..., -0.6314, -0.7647, -0.6627],\n",
              "           [-0.6000, -0.5765, -0.5451,  ..., -0.6157, -0.7020, -0.6392],\n",
              "           ...,\n",
              "           [-0.4039, -0.4275, -0.4588,  ..., -0.5373, -0.4353, -0.4431],\n",
              "           [-0.3412, -0.3725, -0.3961,  ..., -0.5529, -0.5137, -0.4980],\n",
              "           [-0.3255, -0.3098, -0.3176,  ..., -0.4667, -0.4667, -0.4510]],\n",
              " \n",
              "          [[-0.5843, -0.4980, -0.4431,  ..., -0.6627, -0.7804, -0.8275],\n",
              "           [-0.6157, -0.5137, -0.4196,  ..., -0.6863, -0.7882, -0.6784],\n",
              "           [-0.6471, -0.6314, -0.5922,  ..., -0.6627, -0.7176, -0.6627],\n",
              "           ...,\n",
              "           [-0.4118, -0.4275, -0.4667,  ..., -0.5294, -0.4353, -0.4431],\n",
              "           [-0.3569, -0.3804, -0.3961,  ..., -0.5373, -0.5059, -0.4902],\n",
              "           [-0.3333, -0.3098, -0.3176,  ..., -0.4431, -0.4353, -0.4196]],\n",
              " \n",
              "          [[-0.5843, -0.4980, -0.4275,  ..., -0.6157, -0.7569, -0.7961],\n",
              "           [-0.6000, -0.5059, -0.4275,  ..., -0.6392, -0.7569, -0.6549],\n",
              "           [-0.6157, -0.6157, -0.6078,  ..., -0.6078, -0.6941, -0.6392],\n",
              "           ...,\n",
              "           [-0.4275, -0.4431, -0.4824,  ..., -0.4275, -0.3647, -0.3725],\n",
              "           [-0.3725, -0.3961, -0.4039,  ..., -0.4353, -0.4039, -0.3882],\n",
              "           [-0.3490, -0.3098, -0.3176,  ..., -0.3490, -0.3412, -0.3255]]],\n",
              " \n",
              " \n",
              "         [[[-0.2549, -0.1529, -0.1294,  ...,  0.2078,  0.1922,  0.1529],\n",
              "           [ 0.1608,  0.2157,  0.2078,  ...,  0.2549,  0.2078,  0.1137],\n",
              "           [ 0.2314,  0.2471,  0.2706,  ...,  0.1608,  0.1529,  0.0118],\n",
              "           ...,\n",
              "           [ 0.2706,  0.1373, -0.0353,  ...,  0.0980,  0.1686,  0.2392],\n",
              "           [ 0.1216,  0.0039, -0.1373,  ...,  0.0902,  0.1686,  0.1922],\n",
              "           [ 0.1216,  0.1529,  0.1216,  ...,  0.2314,  0.2863,  0.3098]],\n",
              " \n",
              "          [[-0.0510,  0.0275,  0.0431,  ...,  0.3255,  0.3098,  0.2863],\n",
              "           [ 0.3020,  0.3412,  0.3255,  ...,  0.3647,  0.3176,  0.2314],\n",
              "           [ 0.3412,  0.3647,  0.3804,  ...,  0.2706,  0.2706,  0.1529],\n",
              "           ...,\n",
              "           [ 0.2941,  0.1137, -0.0431,  ...,  0.1765,  0.2392,  0.2941],\n",
              "           [ 0.1765,  0.0353, -0.0667,  ...,  0.1608,  0.2471,  0.2706],\n",
              "           [ 0.1686,  0.1608,  0.1608,  ...,  0.2627,  0.3412,  0.3882]],\n",
              " \n",
              "          [[-0.3412, -0.2627, -0.2392,  ..., -0.0588, -0.0902, -0.1059],\n",
              "           [-0.0824, -0.0510, -0.0353,  ..., -0.0118, -0.0824, -0.1529],\n",
              "           [-0.0510, -0.0039,  0.0196,  ..., -0.1216, -0.1059, -0.2235],\n",
              "           ...,\n",
              "           [-0.0667, -0.1686, -0.3176,  ..., -0.2471, -0.1765, -0.1137],\n",
              "           [-0.1608, -0.2314, -0.3412,  ..., -0.2314, -0.1216, -0.0902],\n",
              "           [-0.2000, -0.1765, -0.1922,  ..., -0.1216,  0.0353,  0.0667]]],\n",
              " \n",
              " \n",
              "         [[[-0.3412, -0.3647, -0.0980,  ..., -0.5529, -0.5843, -0.6157],\n",
              "           [-0.3490, -0.4431, -0.2549,  ..., -0.5765, -0.6078, -0.6235],\n",
              "           [-0.3725, -0.4980, -0.4353,  ..., -0.6000, -0.6314, -0.6157],\n",
              "           ...,\n",
              "           [-0.2157, -0.2941, -0.0118,  ...,  0.3961,  0.2784,  0.2392],\n",
              "           [ 0.1373, -0.0667,  0.0275,  ...,  0.1294,  0.4039,  0.5765],\n",
              "           [ 0.1765,  0.1922,  0.1529,  ..., -0.1373, -0.1529,  0.0431]],\n",
              " \n",
              "          [[-0.3176, -0.3569, -0.0902,  ..., -0.5686, -0.6078, -0.6471],\n",
              "           [-0.3412, -0.4510, -0.2706,  ..., -0.6078, -0.6392, -0.6471],\n",
              "           [-0.3882, -0.5137, -0.4588,  ..., -0.6392, -0.6706, -0.6471],\n",
              "           ...,\n",
              "           [-0.4588, -0.5608, -0.3176,  ...,  0.1294, -0.0196, -0.0039],\n",
              "           [-0.0824, -0.3333, -0.2784,  ..., -0.0824,  0.2000,  0.4118],\n",
              "           [-0.0353, -0.0667, -0.1608,  ..., -0.3020, -0.3020, -0.0824]],\n",
              " \n",
              "          [[-0.2471, -0.2078,  0.0902,  ..., -0.8824, -0.8588, -0.8980],\n",
              "           [-0.2549, -0.3020, -0.0745,  ..., -0.8431, -0.8510, -0.8980],\n",
              "           [-0.3098, -0.4118, -0.2941,  ..., -0.8275, -0.8353, -0.8902],\n",
              "           ...,\n",
              "           [-0.5529, -0.6863, -0.4588,  ...,  0.0353, -0.0902, -0.0745],\n",
              "           [-0.2235, -0.4745, -0.4196,  ..., -0.1294,  0.1686,  0.4039],\n",
              "           [-0.1922, -0.2078, -0.2784,  ..., -0.3333, -0.3176, -0.0745]]]]),\n",
              " tensor([6, 0, 5, 1, 8, 1, 3, 6, 9, 1, 7, 2, 8, 5, 4, 7, 3, 5, 4, 0, 3, 2, 7, 0,\n",
              "         4, 0, 7, 3, 5, 8, 5, 4]))"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "#Let's print some batches\n",
        "data = next(iter(trainloader))[0]\n",
        "label = next(iter(trainloader))[1]\n",
        "\n",
        "data, label"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DAS-EkaHW5UP"
      },
      "source": [
        "# 2. Data analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VC4YNmsQGdEp"
      },
      "source": [
        "Let us compute some statistics of the dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yUhIdGmEGdEp",
        "outputId": "000014b0-1c76-4421-9f1a-e8da6ef29e59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean: -0.015041115693747997\n",
            "Std: 0.4949342906475067\n",
            "Max: 1.0\n",
            "Min: -1.0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Convert the tensor to a numpy array\n",
        "images = data.numpy()\n",
        "\n",
        "# Compute the statistics\n",
        "min_value = np.min(images)\n",
        "max_value = np.max(images)\n",
        "mean_value = np.mean(images)\n",
        "std_value = np.std(images)\n",
        "\n",
        "print(f'Mean: {mean_value}\\nStd: {std_value}\\nMax: {max_value}\\nMin: {min_value}\\n')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jCyoADK5GdEq"
      },
      "source": [
        "First, let's verify if the dataset is well balanced."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "HKVYCh_ZGdEq",
        "outputId": "84203ba1-08e5-4481-c781-07fd77df74fc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define the labels\n",
        "labels = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\n",
        "\n",
        "# Define a list of colors for each label\n",
        "colors = ['#FF5733', '#FFC300', '#DAF7A6', '#C70039', '#900C3F', '#581845', '#003F5C', '#FF7F50', '#008080', '#8B4513']\n",
        "\n",
        "# Count the number of images per label\n",
        "label_counts = {}\n",
        "for label in labels:\n",
        "    label_counts[label] = 0\n",
        "for i in range(len(trainset.targets)):\n",
        "    label = labels[trainset.targets[i]]\n",
        "    label_counts[label] += 1\n",
        "\n",
        "# Plot the bar chart \n",
        "plt.bar(range(len(label_counts)), list(label_counts.values()), align='center', color=colors)\n",
        "plt.xticks(range(len(label_counts)), list(label_counts.keys()), rotation=45)\n",
        "plt.xlabel(\"Label\")\n",
        "plt.ylabel(\"Number of images\")\n",
        "plt.title(\"Repartition of each label in the CIFAR-10 dataset\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dPB_uog0YGTz"
      },
      "source": [
        "The dataset is balanced. Thus, the performance of our models won't be impacted."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PgwgOmb4GdEq"
      },
      "source": [
        "Let's show some sample of the dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 360
        },
        "id": "g3dBOQN7GdEr",
        "outputId": "f535b3c2-edf4-48b7-b604-3233a7fa644f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "labels = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\n",
        "\n",
        "# Create a dictionary to store one image per label\n",
        "images = {}\n",
        "for label in labels:\n",
        "    images[label] = None\n",
        "\n",
        "# Loop through the training set and store the first image of each label\n",
        "for i in range(len(trainset.targets)):\n",
        "    label = labels[trainset.targets[i]]\n",
        "    if images[label] is None:\n",
        "        images[label] = trainset.data[i]\n",
        "\n",
        "# Plot the images\n",
        "fig, axs = plt.subplots(2, 5, figsize=(10, 4))\n",
        "axs = axs.flatten()\n",
        "for i, label in enumerate(labels):\n",
        "    axs[i].imshow(images[label])\n",
        "    axs[i].set_title(label)\n",
        "    axs[i].axis('off')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G5S_gCWHGdEr"
      },
      "source": [
        "# 3. CNN Models\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p-SlBeM6ijzB"
      },
      "source": [
        "## 3.1. First CNN model\n",
        "\n",
        "Before defining a first CNN, we will begin by defining a `train function`. It will enable to train our model and plot the predictions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "8x7__MQJGdEs"
      },
      "outputs": [],
      "source": [
        "def train_model(model, criterion, optimizer, scheduler, num_epochs, trainData, valData, device):\n",
        "    \n",
        "    model.to(device)\n",
        "    epoch_loss, epoch_acc, epoch_val_loss, epoch_val_acc = [], [], [], []\n",
        "    \n",
        "    #d√©finition du temps de d√©but\n",
        "    since = time.time()\n",
        "\n",
        "    #initialisation des meilleurs poids possibles\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc = 0.0\n",
        "    best_loss = float('inf')\n",
        "    for e in range(num_epochs):\n",
        "\n",
        "        print(\"EPOCH:\",e+1, \"/\",num_epochs)\n",
        "        \n",
        "        ### Phase d'entra√Ænement\n",
        "        running_loss = 0\n",
        "        running_accuracy = 0\n",
        "\n",
        "        ## On met le r√©seau en mode 'entra√Ænement'\n",
        "        model.train()\n",
        "\n",
        "        for i, batch in enumerate(tqdm(trainData)):\n",
        "\n",
        "            # batch du dataloader\n",
        "            data = batch[0]\n",
        "            labels = batch[1]\n",
        "            # migration du batch vers le GPU\n",
        "            data = data.to(device)\n",
        "            labels = labels.to(device)\n",
        "            optimizer.zero_grad() # zero the parameter gradients\n",
        "            # Calcul de la sortie du r√©seau\n",
        "            out = model(data)\n",
        "            \n",
        "            \n",
        "            \n",
        "            predicted = torch.argmax(out, dim = -1)\n",
        "\n",
        "            # Calcul de la perte\n",
        "            loss = criterion(out, labels)\n",
        "\n",
        "\n",
        "            # Calcul du gradient\n",
        "            loss.backward()\n",
        "\n",
        "            # on applique l'algorithme de descente pour mettre √† jour les poids\n",
        "            optimizer.step()\n",
        "            \n",
        "            ## Calculs √©lementaires\n",
        "            with torch.no_grad():\n",
        "                running_loss += loss.item()\n",
        "                running_accuracy += (out.max(1)[1] == labels).sum().item()\n",
        "\n",
        "        print(\"Training accuracy:\", running_accuracy/len(trainData),\n",
        "            \"Training loss:\", running_loss/len(trainData))\n",
        "\n",
        "        epoch_loss.append(running_loss/len(trainData))\n",
        "        epoch_acc.append(running_accuracy/len(trainData))\n",
        "        \n",
        "        ### Phase de validation\n",
        "        \n",
        "        # On r√©p√®te la m√™me proc√©dure\n",
        "        \n",
        "        ## On met le r√©seau en mode '√©valuation'\n",
        "        model.eval()\n",
        "\n",
        "        running_val_loss = 0\n",
        "        running_val_accuracy = 0\n",
        "        \n",
        "        \n",
        "        for i, batch in enumerate(tqdm(valData)):\n",
        "\n",
        "            with torch.no_grad():\n",
        "                \n",
        "                # batch du dataloader\n",
        "                data = batch[0]\n",
        "                labels = batch[1]\n",
        "                # migration du batch vers le GPU\n",
        "                data = data.to(device)\n",
        "                labels = labels.to(device)\n",
        "                # Calcul de la sortie\n",
        "                out = model(data)\n",
        "                # Calcul de la perte\n",
        "                loss = criterion(out, labels)\n",
        "                \n",
        "                running_val_loss += loss.item()\n",
        "                running_val_accuracy += (out.max(1)[1] == labels).sum().item()\n",
        "\n",
        "        print(\"Validation accuracy:\", running_val_accuracy/len(valData),\n",
        "              \"Validation loss:\", running_val_loss/len(valData))\n",
        "\n",
        "        epoch_val_loss.append(running_val_loss/len(valData))\n",
        "        epoch_val_acc.append(running_val_accuracy/len(valData))\n",
        "        \n",
        "        \n",
        "        if (epoch_val_acc[-1] > best_acc):\n",
        "                best_acc = epoch_val_acc[-1]\n",
        "                best_model_wts = copy.deepcopy(model.state_dict())\n",
        "\n",
        "        if (epoch_val_loss[-1] < best_loss):\n",
        "                best_loss = epoch_val_loss[-1]\n",
        "                best_model_wts = copy.deepcopy(model.state_dict())\n",
        "                \n",
        "                \n",
        "    # calcul du temps d'√©xecution           \n",
        "    time_elapsed = time.time() - since\n",
        "    print('Training complete in {:.0f}m {:.0f}s'.format(\n",
        "        time_elapsed // 60, time_elapsed % 60))\n",
        "    print('Best val Acc: {:4f}'.format(best_acc))\n",
        "    print('Best val Loss: {:4f}'.format(best_loss))\n",
        "\n",
        "    # laffichage du mod√®le avec les meilleurs poids\n",
        "    model.load_state_dict(best_model_wts)\n",
        "    \n",
        "    fig, axes = plt.subplots(1, 2,figsize=(10,5))\n",
        "    fig.suptitle('Training and validation statistics')\n",
        "\n",
        "    sns.lineplot(ax=axes[0], x=np.arange(len(epoch_loss)), y=epoch_loss)\n",
        "    sns.lineplot(ax=axes[0], x=np.arange(len(epoch_val_loss)), y=epoch_val_loss)\n",
        "    axes[0].legend(labels=[\"Train loss\", \"Val loss\"])\n",
        "\n",
        "    sns.lineplot(ax=axes[1], x=np.arange(len(epoch_acc)), y=epoch_acc)\n",
        "    sns.lineplot(ax=axes[1], x=np.arange(len(epoch_val_acc)), y=epoch_val_acc)\n",
        "    axes[1].legend(labels=[\"Train accuracy\", \"Val accuracy\"])\n",
        "    plt.show()\n",
        "    \n",
        "    #on renvoie notre mod√®le avec les epochs et accuracy associ√©s\n",
        "    return model, epoch_loss, epoch_acc, epoch_val_loss, epoch_val_acc, best_acc, best_loss\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TSLJRc4sY4St"
      },
      "source": [
        "Now, let's create a first CNN. The functions used for it are :\n",
        "* *Conv2d*: Applies a 2D convolution over an input signal composed of several input planes\n",
        "* *BatchNorm2d*: Applies Batch Normalization over a 4D input (a mini-batch of 2D inputs with additional channel dimension)\n",
        "* *ReLU*: Applies the rectified linear unit function element-wise ; $$ReLU(x) = max(0,x) = (x)^+$$\n",
        "* *MaxPool2d*: Applies a 2D max pooling over an input signal composed of several input planes\n",
        "* *Flatten*: Flattens a contiguous range of dims into a tensor\n",
        "* *Linear*: Applies a linear transformation to the incoming data ; $$y = xA^T+b$$\n",
        "* *AdaptiveAvgPool2d*: Applies a 2D adaptive average pooling over an input signal composed of several input planes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fUsC-AvPGdEt",
        "outputId": "13e0abcc-85a7-483a-a5f2-c44ae9d890de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [32, 32, 14, 14]             896\n",
            "       BatchNorm2d-2           [32, 32, 14, 14]              64\n",
            "              ReLU-3           [32, 32, 14, 14]               0\n",
            "         MaxPool2d-4             [32, 32, 7, 7]               0\n",
            "            Conv2d-5             [32, 64, 5, 5]          18,496\n",
            "       BatchNorm2d-6             [32, 64, 5, 5]             128\n",
            "              ReLU-7             [32, 64, 5, 5]               0\n",
            "         MaxPool2d-8             [32, 64, 2, 2]               0\n",
            "            Conv2d-9            [32, 128, 2, 2]          73,856\n",
            "      BatchNorm2d-10            [32, 128, 2, 2]             256\n",
            "             ReLU-11            [32, 128, 2, 2]               0\n",
            "        MaxPool2d-12            [32, 128, 1, 1]               0\n",
            "AdaptiveAvgPool2d-13            [32, 128, 1, 1]               0\n",
            "           Linear-14                   [32, 10]           1,290\n",
            "================================================================\n",
            "Total params: 94,986\n",
            "Trainable params: 94,986\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.09\n",
            "Forward/backward pass size (MB): 6.65\n",
            "Params size (MB): 0.36\n",
            "Estimated Total Size (MB): 7.11\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchsummary import summary\n",
        "\n",
        "class MyCNN(nn.Module):\n",
        "    def __init__(self, in_channels=3, n_class=10):\n",
        "        super(MyCNN, self).__init__()\n",
        "        \n",
        "        self.conv1 = nn.Conv2d(in_channels, 32, kernel_size=3)\n",
        "        self.bn1 = nn.BatchNorm2d(32)\n",
        "        self.activation = nn.ReLU()\n",
        "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3)\n",
        "        self.bn2 = nn.BatchNorm2d(64)\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.conv3 = nn.Conv2d(64, 128, kernel_size=3)\n",
        "        self.bn3 = nn.BatchNorm2d(128)\n",
        "        \n",
        "        self.flatten = nn.Flatten()\n",
        "        self.fc = nn.Linear(128, n_class)\n",
        "        self.avgpool = nn.AdaptiveAvgPool2d((1, 1)) # global average pooling\n",
        "        \n",
        "    def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.bn1(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "\n",
        "        x = self.conv2(x)\n",
        "        x = self.bn2(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "        x = nn.functional.pad(x, (1,1,1,1))\n",
        "\n",
        "        x = self.conv3(x)\n",
        "        x = self.bn3(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "        x = self.avgpool(x) # global average pooling\n",
        "        \n",
        "        x = x.view(x.size(0), -1)  # flatten\n",
        "        x = self.fc(x)\n",
        "        return x\n",
        "    \n",
        "net1 = MyCNN()\n",
        "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
        "net1 = net1.to(device)\n",
        "# Architecture of the CNN\n",
        "summary(net1, (3, 16, 16), batch_size = batch_size)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bfnGBv8wGdEu"
      },
      "source": [
        "The parameters required to launch the function `train_classifier` are:\n",
        "- `model`: the model we created\n",
        "- `optimizer`: optimizer used to update the parameters \n",
        "- `train_loader`: training dataset loader\n",
        "- `valid_loader`: validation dataset loader\n",
        "- `nb_epoch`: number of epochs \n",
        "- `criterion`: loss function used to evaluate the performance of the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "uBvy7Dg0GdEv"
      },
      "outputs": [],
      "source": [
        "batch_size = batch_size\n",
        "num_workers = 2\n",
        "train_dataloader = trainloader\n",
        "val_dataloader = testloader\n",
        "learning_rate = 1e-3\n",
        "m = 0.9\n",
        "step = 1\n",
        "gamma_rate = 0.1\n",
        "\n",
        "# create the model\n",
        "model_ft = MyCNN()\n",
        "device = 'cpu'\n",
        "model_ft.to(device)\n",
        "\n",
        "# V√©rification que tous les param√®tres soient optimis√©s.\n",
        "optimizer_ft = SGD(model_ft.parameters(), lr=learning_rate, momentum=m)\n",
        "    \n",
        "# Tous les n_epochs parcourus (step), le learning diminue de 0.1.\n",
        "exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=step, gamma=gamma_rate)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "nb_epochs = 10\n",
        "verbose = True"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395,
          "referenced_widgets": [
            "4bdf6086e3114a2fa391c122855c5c4c",
            "72e36a6ce3c34c64818f74b085c9f96b",
            "a3aee79f133748d58da87d307a1ce3de",
            "854ac19971634931bf2521aa6ebf9c29",
            "676c7cfe6aa541d5aad19167a1918888",
            "9d8b13747b48476596aa12e7b4638dd1",
            "575d6f7f75ff436391eb53d5e167a01f",
            "2569593dbb4647af8de35a2f76f601ad",
            "b3932750afaf483fa8ccc29dfd7ecbb2",
            "cac3a0f5568f4426950b75c5d707eab0",
            "8c9c355cc313442e967a04674984dff5"
          ]
        },
        "id": "KmKhMR82GdEw",
        "outputId": "82bc49e3-c8b9-4c43-fd55-2be44218195b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EPOCH: 1 / 10\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1563 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "4bdf6086e3114a2fa391c122855c5c4c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-464896f70158>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel_ft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_ft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer_ft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexp_lr_scheduler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnb_epochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_dataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_dataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-8-f2dc1e15a0cd>\u001b[0m in \u001b[0;36mtrain_model\u001b[0;34m(model, criterion, optimizer, scheduler, num_epochs, trainData, valData, device)\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m             \u001b[0;31m# Calcul du gradient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m             \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m             \u001b[0;31m# on applique l'algorithme de descente pour mettre √† jour les poids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    485\u001b[0m                 \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m             )\n\u001b[0;32m--> 487\u001b[0;31m         torch.autograd.backward(\n\u001b[0m\u001b[1;32m    488\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    198\u001b[0m     \u001b[0;31m# some Python versions print out the first line of a multi-line function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;31m# calls in the traceback and some print out the last line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m     Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n\u001b[0m\u001b[1;32m    201\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m         allow_unreachable=True, accumulate_grad=True)  # Calls into the C++ engine to run the backward pass\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler, nb_epochs, train_dataloader, val_dataloader, device = device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ghhmz2N8W5jG"
      },
      "source": [
        "Let's save the model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "UfRwNMZ5W3J9"
      },
      "outputs": [],
      "source": [
        "#model, epoch_loss, epoch_acc, epoch_val_loss, epoch_val_acc, best_acc, best_loss\n",
        "model = {   \n",
        "                'train_loss':  model_ft[1],\n",
        "                'train_acc':  model_ft[2],\n",
        "                'val_loss':  model_ft[3],\n",
        "                'val_acc':  model_ft[4],\n",
        "                'best_acc':  model_ft[5],\n",
        "                'best_loss':  model_ft[6],\n",
        "                }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fuEg1PMQYviv"
      },
      "source": [
        "We define a function we will reuse later. It enables to save the models we will try during this lab."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "89ffghlpXj0s"
      },
      "outputs": [],
      "source": [
        "import json\n",
        "\n",
        "def Save_model(model, title : str):\n",
        "  with open(title + '.json', 'w') as f:\n",
        "    json.dump(model, f)\n",
        "\n",
        "Save_model(model, 'MyFirstCNN')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vGt0W2IBGdEx"
      },
      "source": [
        "### 3.1.1 Loading the model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WFlhK7jnZ6vX"
      },
      "source": [
        "Now, we will load the model we tested. We will verify we kept the metrics obtained and we will analyze them."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "BaRHAw0xW1yA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab4462f8-aff0-4ff4-9c98-cd2ff1cdefe1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MyCNN(\n",
            "  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "  (activation): ReLU()\n",
            "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (bn3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "  (flatten): Flatten(start_dim=1, end_dim=-1)\n",
            "  (fc): Linear(in_features=128, out_features=10, bias=True)\n",
            "  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
            ")\n",
            "{'train_loss': [1.5493752037342434, 1.227648902458025, 1.099544566255766, 1.0073411177155, 0.9411324128384629], 'train_acc': [14.195777351247601, 18.239923224568138, 19.63147792706334, 20.802303262955853, 21.502239283429304], 'val_loss': [1.3379905410468007, 1.1801857436046053, 1.1113559249490976, 0.9829097134998431, 0.9782569271307022], 'val_acc': [16.706070287539937, 18.261980830670925, 19.27476038338658, 21.0, 20.900958466453673], 'best_acc': 21.0, 'best_loss': 0.9782569271307022}\n"
          ]
        }
      ],
      "source": [
        "loaded_model = MyCNN()\n",
        "\n",
        "print(loaded_model)\n",
        "\n",
        "with open('MyFirstCNN.json', 'r') as f:\n",
        "    loaded_dict = json.load(f)\n",
        "\n",
        "# print the loaded dictionary\n",
        "print(loaded_dict)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y6NgxfFza4us"
      },
      "source": [
        "As we can see, the metrics and the model we saved are kept in memory.  \n",
        "Let's plot the different accuracies and loss we obtained."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "_bN1NSPJGdEy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "outputId": "d2bf12db-9870-415b-ab11-3096ff0158da"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "train_loss = loaded_dict['train_loss']\n",
        "train_acc = loaded_dict['train_acc']\n",
        "val_loss = loaded_dict['val_loss']\n",
        "val_acc = loaded_dict['val_acc']\n",
        "best_loss = loaded_dict['best_loss']\n",
        "best_acc = loaded_dict['best_acc']\n",
        "\n",
        "# plot the training and validation loss and accuracy\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10,5))\n",
        "fig.suptitle('Training and validation statistics')\n",
        "\n",
        "sns.lineplot(ax=axes[0], x=np.arange(len(train_loss)), y=train_loss)\n",
        "sns.lineplot(ax=axes[0], x=np.arange(len(val_loss)), y=val_loss)\n",
        "axes[0].legend(labels=[\"Train loss\",\"Val loss\"])\n",
        "\n",
        "sns.lineplot(ax=axes[1], x=np.arange(len(train_acc)), y=train_acc)\n",
        "sns.lineplot(ax=axes[1], x=np.arange(len(val_acc)), y=val_acc)\n",
        "axes[1].legend(labels=[\"Train accuracy\", \"Val accuracy\"])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6la8n_PAfzG1"
      },
      "source": [
        "So as we can see, we got the same results as before.\n",
        "Overall, the values of the accuracy is not very great. We could get a better result."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yx0tb3JBGdEz"
      },
      "source": [
        "### 3.1.2. Analyzing of the results obtained"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pVQGKuHxGdEz"
      },
      "outputs": [],
      "source": [
        "print(f\"The best loss is {best_loss:.4f}; the best accuracy is {best_acc:.4f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "with torch.no_grad():\n",
        "    predictions = []\n",
        "    true_labels = []\n",
        "    for images, labels in val_dataloader:\n",
        "        outputs = loaded_model(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        predictions.extend(predicted.cpu().numpy())\n",
        "        true_labels.extend(labels.cpu().numpy())\n",
        "\n",
        "cm = confusion_matrix(true_labels, predictions)\n"
      ],
      "metadata": {
        "id": "CTq7YRwHIM8O"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the class names\n",
        "classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
        "\n",
        "# Plot the confusion matrix\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.imshow(cm, interpolation='nearest')\n",
        "plt.grid(False)\n",
        "for i in range(cm.shape[0]):\n",
        "    for j in range(cm.shape[1]):\n",
        "        plt.text(j, i, str(cm[i][j]), horizontalalignment=\"center\", color=\"white\")\n",
        "\n",
        "plt.title('Confusion matrix')\n",
        "plt.colorbar()\n",
        "tick_marks = np.arange(len(classes))\n",
        "plt.xticks(tick_marks, classes, rotation=45)\n",
        "plt.yticks(tick_marks, classes)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wjLJWKLjI00A",
        "outputId": "56d184c4-7b7e-437b-8aca-2bb94ece6602"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QwK7bfi_GdE1"
      },
      "source": [
        "To resume the performance of the model, let us display the confusion matrix."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jQyrr4nPGdE2"
      },
      "source": [
        "## 3.2. Second CNN model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bJhslDQghjds"
      },
      "source": [
        "Let's create a second CNN. We chose to do a homemade AlexNet. Below, we can see the architecture of AlexNet and the one we will try to follow.\n",
        "<figure>\n",
        "    <img src=\"https://miro.medium.com/v2/resize:fit:828/format:webp/1*fn1hesVtSJzTKyxBfl9nxg.jpeg\" style=\"width:75%;display:block;margin-left:auto;margin-right:auto;\">\n",
        "    <figcaption style=\"text-align: center\"> Fig.2 - Architecture of AlexNet</figcaption>\n",
        "</figure>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xRMCzW3jGdE3"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torchvision.models as models\n",
        "\n",
        "\n",
        "# Define the AlexNet architecture\n",
        "class AlexNet(nn.Module):\n",
        "    def __init__(self, num_classes=10):\n",
        "        super(AlexNet, self).__init__()\n",
        "\n",
        "        self.conv1 = nn.Sequential(\n",
        "            nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=3),\n",
        "            nn.ReLU(inplace=True),\n",
        "            nn.MaxPool2d(kernel_size=3, stride=2))\n",
        "\n",
        "\n",
        "        self.conv2 = nn.Sequential(nn.Conv2d(96, 256, kernel_size=3, padding=2),\n",
        "            nn.ReLU(inplace=True),\n",
        "            nn.MaxPool2d(kernel_size=3, stride=2))\n",
        "\n",
        "        self.conv3 = nn.Sequential(nn.Conv2d(256, 384, kernel_size=3, padding=1),\n",
        "            nn.ReLU(inplace=True))\n",
        "        \n",
        "        self.conv4 = nn.Sequential(nn.Conv2d(384, 384, kernel_size=3, padding=1),\n",
        "            nn.ReLU(inplace=True))\n",
        "\n",
        "        self.conv5 = nn.Sequential(nn.Conv2d(384, 256, kernel_size=3, padding=1),\n",
        "            nn.ReLU(inplace=True),\n",
        "            # nn.MaxPool2d(kernel_size=3, stride=2)\n",
        "            )\n",
        "        \n",
        "        self.avgpool = nn.AdaptiveAvgPool2d((6, 6))\n",
        "\n",
        "\n",
        "        self.fc1 = nn.Sequential(\n",
        "            nn.Dropout(),\n",
        "            nn.Linear(256 * 6 * 6, 4096),\n",
        "            nn.ReLU(inplace=True))\n",
        "        \n",
        "        self.fc2 = nn.Sequential(nn.Dropout(),\n",
        "            nn.Linear(4096, 4096),\n",
        "            nn.ReLU(inplace=True))\n",
        "        \n",
        "        self.fc3 = nn.Linear(4096, num_classes)\n",
        "        \n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = self.conv3(x)\n",
        "        x = self.conv4(x)\n",
        "        x = self.conv5(x)\n",
        "        x = self.avgpool(x)\n",
        "        x = torch.flatten(x, 1)\n",
        "        x = self.fc1(x)\n",
        "        x = self.fc2(x)\n",
        "        x = self.fc3(x)\n",
        "\n",
        "        return x\n",
        "\n",
        "\n",
        "net2 = AlexNet()\n",
        "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
        "net2 = net2.to(device)\n",
        "summary(net2, (3, 256, 256), batch_size = batch_size)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "84RZ5EnUGdE4"
      },
      "outputs": [],
      "source": [
        "batch_size = 96\n",
        "trainloader = torch.utils.data.DataLoader(\n",
        "    trainset, batch_size=batch_size, shuffle=True, num_workers=2\n",
        ")\n",
        "\n",
        "testloader = torch.utils.data.DataLoader(\n",
        "    testset, batch_size=batch_size, shuffle=False, num_workers=2\n",
        ")\n",
        "learning_rate = 1e-3\n",
        "m = 0.9\n",
        "step = 1\n",
        "gamma_rate = 0.1\n",
        "\n",
        "# create the model\n",
        "model_ft = AlexNet()\n",
        "device = 'cpu'\n",
        "model_ft.to(device)\n",
        "\n",
        "# V√©rification que tous les param√®tres soient optimis√©s.\n",
        "optimizer_ft = SGD(model_ft.parameters(), lr=learning_rate, momentum=m)\n",
        "    \n",
        "# Tous les n_epochs parcourus (step), le learning diminue de 0.1.\n",
        "exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=step, gamma=gamma_rate)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "nb_epochs = 6\n",
        "verbose = True"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dji-zGPSGdE4"
      },
      "outputs": [],
      "source": [
        "model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler, nb_epochs, train_dataloader, val_dataloader, device = device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MhxFhgmNo8BF"
      },
      "source": [
        "## 3.3 Third model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "C6YIUxRFqV4B"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torchvision.models as models\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torchvision.models as models\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchsummary import summary\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchsummary import summary\n",
        "\n",
        "class HomemadeCNN(nn.Module):\n",
        "    def __init__(self, in_channels=3, n_class=10):\n",
        "        super(HomemadeCNN, self).__init__()\n",
        "        \n",
        "\n",
        "        self.conv = nn.Conv2d(in_channels, 16, kernel_size=3, padding = 2)\n",
        "        self.bn = nn.BatchNorm2d(16)\n",
        "        self.conv1 = nn.Conv2d(16, 32, kernel_size=3, padding = 1)\n",
        "        self.bn1 = nn.BatchNorm2d(32)\n",
        "        self.activation = nn.ReLU()\n",
        "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding = 1)\n",
        "        self.bn2 = nn.BatchNorm2d(64)\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding = 1)\n",
        "        self.bn3 = nn.BatchNorm2d(128)\n",
        "        self.conv4 = nn.Conv2d(128, 256, kernel_size=1, padding = 1)\n",
        "        self.bn4 = nn.BatchNorm2d(256)\n",
        "        self.flatten = nn.Flatten()\n",
        "        self.fc = nn.Linear(256, n_class)\n",
        "        self.d = nn.Dropout(p = 0.5)\n",
        "        self.avgpool = nn.AdaptiveAvgPool2d((1, 1)) # global average pooling\n",
        "        \n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        x = self.bn(x)\n",
        "        x = self.pool(x)\n",
        "        x = self.conv1(x)\n",
        "        x = self.bn1(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "\n",
        "        x = self.conv2(x)\n",
        "        x = self.bn2(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "\n",
        "        # x = nn.functional.pad(x, (1,1,1,1))\n",
        "\n",
        "        x = self.conv3(x)\n",
        "        x = self.bn3(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "\n",
        "        x = self.conv4(x)\n",
        "        x = self.bn4(x)\n",
        "        x = self.activation(x)\n",
        "        x = self.pool(x)\n",
        "\n",
        "        x = self.avgpool(x) # global average pooling\n",
        "        \n",
        "        x = x.view(x.size(0), -1)  # flatten\n",
        "        x = self.fc(x)\n",
        "        return x\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "net2 = HomemadeCNN()\n",
        "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
        "net2 = net2.to(device)\n",
        "summary(net2, (3, 32, 32), batch_size = batch_size)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CQrhvy02saQx"
      },
      "outputs": [],
      "source": [
        "batch_size = 32\n",
        "trainloader = torch.utils.data.DataLoader(\n",
        "    trainset, batch_size=batch_size, shuffle=True, num_workers=2\n",
        ")\n",
        "\n",
        "testloader = torch.utils.data.DataLoader(\n",
        "    testset, batch_size=batch_size, shuffle=False, num_workers=2\n",
        ")\n",
        "learning_rate = 1e-4\n",
        "m = 0.9\n",
        "step = 1\n",
        "gamma_rate = 0.01\n",
        "\n",
        "# create the model\n",
        "model_ft = HomemadeCNN()\n",
        "device = 'cpu'\n",
        "model_ft.to(device)\n",
        "\n",
        "# V√©rification que tous les param√®tres soient optimis√©s.\n",
        "optimizer_ft = SGD(model_ft.parameters(), lr=learning_rate, momentum=m)\n",
        "    \n",
        "# Tous les n_epochs parcourus (step), le learning diminue de 0.1.\n",
        "exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=step, gamma=gamma_rate)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "nb_epochs = 10\n",
        "\n",
        "verbose = True\n",
        "model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler, nb_epochs, train_dataloader, val_dataloader, device = device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FOfFLSxusaSy"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HGxT-aNUsaUo"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zivydRcFGdE5"
      },
      "source": [
        "### 3.5. Loading the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gHs0f_RaGdE5"
      },
      "outputs": [],
      "source": [
        "# load what we have saved\n",
        "loaded_model = SimpleCNN()\n",
        "save_dir = 'saved_models'\n",
        "\n",
        "# load weights\n",
        "loaded_model.load_state_dict(torch.load(os.path.join(save_dir, 'model_weights.pth'), map_location=device))\n",
        "\n",
        "# load metrics\n",
        "with open(os.path.join(save_dir, 'metrics.json'), 'r') as f:\n",
        "    metrics = json.load(f)\n",
        "train_loss = metrics['train_loss']\n",
        "train_acc = metrics['train_acc']\n",
        "val_loss = metrics['val_loss']\n",
        "val_acc = metrics['val_acc']\n",
        "best_val_loss = metrics['best_val_loss']\n",
        "best_val_acc = metrics['best_val_acc']\n",
        "\n",
        "# plot the training and validation loss and accuracy\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10,5))\n",
        "fig.suptitle('Training and validation statistics')\n",
        "\n",
        "sns.lineplot(ax=axes[0], x=np.arange(len(train_loss)), y=train_loss)\n",
        "sns.lineplot(ax=axes[0], x=np.arange(len(val_loss)), y=val_loss)\n",
        "axes[0].legend(labels=[\"Train loss\",\"Val loss\"])\n",
        "\n",
        "sns.lineplot(ax=axes[1], x=np.arange(len(train_acc)), y=train_acc)\n",
        "sns.lineplot(ax=axes[1], x=np.arange(len(val_acc)), y=val_acc)\n",
        "axes[1].legend(labels=[\"Train accuracy\", \"Val accuracy\"])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iphQMI-wGdE5"
      },
      "source": [
        "Let us see the classes that performed well, and the classes that did not perform well:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mpn89kCYGdE6"
      },
      "outputs": [],
      "source": [
        "from tqdm import tqdm\n",
        "\n",
        "# count predictions for each class\n",
        "correct_pred = {classname: 0 for classname in classes}\n",
        "total_pred = {classname: 0 for classname in classes}\n",
        "\n",
        "# initialize counters for right and wrong predictions\n",
        "right_preds = {classname: [] for classname in classes}\n",
        "wrong_preds = {classname: [] for classname in classes}\n",
        "\n",
        "y_true, y_pred = [], []\n",
        "\n",
        "# no gradients needed\n",
        "with torch.no_grad():\n",
        "    for data in tqdm(testloader):\n",
        "        images, labels = data\n",
        "        outputs = loaded_model(images.to(device))\n",
        "        y_true.extend(labels.numpy())\n",
        "        _, predictions = torch.max(outputs, 1)\n",
        "        y_pred.extend(predictions.cpu().numpy())\n",
        "        \n",
        "        # collect the correct and wrong predictions for each class\n",
        "        for label, prediction, image in zip(labels, predictions, images):\n",
        "            if label == prediction:\n",
        "                correct_pred[classes[label]] += 1\n",
        "                # append the correctly predicted image to the right_preds dictionary\n",
        "                if len(right_preds[classes[label]]) < 5:\n",
        "                    right_preds[classes[label]].append(image.cpu())\n",
        "            else:\n",
        "                wrong_preds[classes[label]].append((image.cpu(), classes[prediction]))\n",
        "            total_pred[classes[label]] += 1\n",
        "\n",
        "\n",
        "# print accuracy for each class\n",
        "for classname, correct_count in correct_pred.items():\n",
        "    accuracy = 100 * float(correct_count) / total_pred[classname]\n",
        "    print(f'Accuracy for class {classname:5s} is {accuracy:.1f} %')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-9mn2X0dGdE6"
      },
      "source": [
        "To resume the performance of the model, let us display the confusion matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "03aJe9MnGdE7"
      },
      "outputs": [],
      "source": [
        "cf_matrix = confusion_matrix(y_true, y_pred)\n",
        "df = pd.DataFrame(cf_matrix, index=classes, columns=classes)\n",
        "\n",
        "plt.figure(figsize=(8,8))\n",
        " \n",
        "# Create heatmap\n",
        "sns.heatmap(dataframe, annot=True, cbar=None,cmap=\"Blues\",fmt=\"d\")\n",
        " \n",
        "plt.title(\"Confusion matrix\", fontsize=16, fontweight='bold')\n",
        "plt.ylabel(\"True class\"), \n",
        "plt.xlabel(\"Predicted class\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o6_BNtA_GdE7"
      },
      "source": [
        "Let us see some of the results:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PziLsBV6GdE7"
      },
      "outputs": [],
      "source": [
        "# display 5 correct and 5 wrong predictions for each class\n",
        "for classname in classes:\n",
        "    fig, axs = plt.subplots(2, 5, figsize=(12, 6))\n",
        "    fig.suptitle(f\"Class: {classname}\", fontsize=16, fontweight='bold')\n",
        "    \n",
        "    for i in range(5):\n",
        "        axs[0, i].imshow((right_preds[classname][i] / 2 + 0.5).permute(1, 2, 0)) # convert image values to [0, 1]\n",
        "        axs[0, i].set_title(\"Right prediction\")\n",
        "        axs[0, i].set_axis_off()\n",
        "        \n",
        "        img, predicted_class = wrong_preds[classname][i]\n",
        "        img = img / 2 + 0.5 # convert image values to [0, 1]\n",
        "        axs[1, i].imshow(img.permute(1, 2, 0))\n",
        "        axs[1, i].set_title(f\"Wrong prediction: {predicted_class}\")\n",
        "        axs[1, i].set_axis_off()\n",
        "\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-tTb7PWNo_IN"
      },
      "source": [
        "# ‚è∞ Exercise 2: Time is money\n",
        "\n",
        "As a starting point for this exercise you will need the best model you have on the first exercise. This will constitute your `baseline_model`. The main idea here is to be pragmatic. You are a big company that want to use a DL model but as time is money for you, you would like to have a DL model that got as little inference time as possible (*i.e.* time to make a prediction is low) without sacrificing too much of your model performance. So that is what you are gonna do:\n",
        "\n",
        "First you will define a function that: gives you the meantime and the standard deviation for a given model to predict a batch (with a batch size you will choose) of test data over 10 batch predictions.\n",
        "\n",
        "Explore (at least 2) the following options (or others if you want) to reduce inference time:\n",
        "\n",
        "*   Pruning nn:¬†[https://pytorch.org/docs/stable/generated/torch.nn.utils.prune.LnStructured.html#torch.nn.utils.prune.LnStructured](https://pytorch.org/docs/stable/generated/torch.nn.utils.prune.LnStructured.html#torch.nn.utils.prune.LnStructured)\n",
        "\n",
        "  [https://intellabs.github.io/distiller/pruning.html](https://intellabs.github.io/distiller/pruning.html)\n",
        "\n",
        "*   Neural network distillation:\n",
        "\n",
        "  [https://intellabs.github.io/distiller/knowledge\\_distillation.html](https://intellabs.github.io/distiller/knowledge_distillation.html) [https://arxiv.org/abs/1503.02531](https://arxiv.org/abs/1503.02531)\n",
        "\n",
        "*   Weight Quantization:\n",
        "\n",
        "  [https://pytorch.org/docs/stable/quantization.html](https://pytorch.org/docs/stable/quantization.html) \n",
        "  [https://huggingface.co/docs/optimum/concept\\_guides/quantization](https://huggingface.co/docs/optimum/concept_guides/quantization)\n",
        "\n",
        "*   Half precision: [https://pytorch.org/blog/accelerating-training-on-nvidia-gpus-with-pytorch-automatic-mixed-precision/](https://pytorch.org/blog/accelerating-training-on-nvidia-gpus-with-pytorch-automatic-mixed-precision/) (Warning: The GPU needs to support float16)\n",
        "\n",
        "*   Model compilation:\n",
        "\n",
        "  [https://pytorch.org/tutorials/intermediate/torch\\_compile\\_tutorial.html](https://pytorch.org/tutorials/intermediate/torch_compile_tutorial.html) (you need torch 2.0)\n",
        "\n",
        "*   Depthwise convolution\n",
        "\n",
        "  Mobil net paper trick [https://arxiv.org/pdf/1704.04861.pdf](https://arxiv.org/pdf/1704.04861.pdf)\n",
        "\n",
        "You should compare the different models you obtain to each other on the two criteria: **inference time** and **test accuracy**. As for exercise one, I should be able to play your part by loading the models you trained without the need to retrain the models myself. When using an approach a short summary of what you are doing is expected. The final comparison should point out a model and explain why (is it better on the two criteria, do you have to make a trade-off, etc...)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x6VJiPjSGdE8"
      },
      "source": [
        "## 2.1 Meantime and standard deviation\n",
        "\n",
        "Let us print out the meantime and standard deviation over 10 batches for our baseline model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q9Mdkn9ENDkN"
      },
      "outputs": [],
      "source": [
        "import time\n",
        "import numpy as np\n",
        "import torch\n",
        "import torchvision\n",
        "\n",
        "def mean_time_std(model, test_loader, batch_size):\n",
        "    times = []\n",
        "    with torch.no_grad():\n",
        "        for i in range(10):\n",
        "            start_time = time.time()\n",
        "            for batch, (data, target) in enumerate(test_loader):\n",
        "                data = data.to(device)\n",
        "                output = model(data)\n",
        "                if batch == batch_size-1:\n",
        "                    break\n",
        "            end_time = time.time()\n",
        "            times.append(end_time - start_time)\n",
        "    \n",
        "    mean_time = np.mean(times)\n",
        "    std_time = np.std(times)\n",
        "    \n",
        "    return mean_time, std_time\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sIjJgAHbZyp0"
      },
      "outputs": [],
      "source": [
        "import torchvision.datasets as datasets\n",
        "import torchvision.transforms as transforms\n",
        "\n",
        "# Define the model to be used\n",
        "model = MyCNN()\n",
        "\n",
        "# Get the mean time and standard deviation for the model's predictions\n",
        "mean_time, std_time = mean_time_std(model, test_loader, batch_size=32)\n",
        "\n",
        "print(f\"Mean time per batch: {mean_time:.4f} seconds\")\n",
        "print(f\"Standard deviation of time per batch: {std_time:.4f} seconds\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SCv_1SMIGdE9"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.16"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "4bdf6086e3114a2fa391c122855c5c4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_72e36a6ce3c34c64818f74b085c9f96b",
              "IPY_MODEL_a3aee79f133748d58da87d307a1ce3de",
              "IPY_MODEL_854ac19971634931bf2521aa6ebf9c29"
            ],
            "layout": "IPY_MODEL_676c7cfe6aa541d5aad19167a1918888"
          }
        },
        "72e36a6ce3c34c64818f74b085c9f96b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d8b13747b48476596aa12e7b4638dd1",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_575d6f7f75ff436391eb53d5e167a01f",
            "value": " 22%"
          }
        },
        "a3aee79f133748d58da87d307a1ce3de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "danger",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2569593dbb4647af8de35a2f76f601ad",
            "max": 1563,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b3932750afaf483fa8ccc29dfd7ecbb2",
            "value": 341
          }
        },
        "854ac19971634931bf2521aa6ebf9c29": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cac3a0f5568f4426950b75c5d707eab0",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_8c9c355cc313442e967a04674984dff5",
            "value": " 341/1563 [00:22&lt;01:09, 17.54it/s]"
          }
        },
        "676c7cfe6aa541d5aad19167a1918888": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9d8b13747b48476596aa12e7b4638dd1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "575d6f7f75ff436391eb53d5e167a01f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2569593dbb4647af8de35a2f76f601ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3932750afaf483fa8ccc29dfd7ecbb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cac3a0f5568f4426950b75c5d707eab0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8c9c355cc313442e967a04674984dff5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}